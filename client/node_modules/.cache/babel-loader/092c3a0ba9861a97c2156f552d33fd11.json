{"ast":null,"code":"import _classCallCheck from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/src/components/Jukebox.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Popup from \"reactjs-popup\";\nimport \"../styles/jukebox.css\";\n\nvar Jukebox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Jukebox, _Component);\n\n  function Jukebox(props) {\n    var _this;\n\n    _classCallCheck(this, Jukebox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Jukebox).call(this, props));\n    var songs = [];\n    var preview_url = \"\";\n    var answer = 0;\n    var score = 0;\n    _this.state = {\n      songs: songs,\n      preview_url: preview_url,\n      answer: answer,\n      score: score\n    };\n    _this.getSpotify = _this.getSpotify.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playSong = _this.playSong.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.guessSong = _this.guessSong.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.gameOver = _this.gameOver.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Jukebox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getSpotify();\n    }\n  }, {\n    key: \"getSpotify\",\n    value: function getSpotify() {\n      var _this2 = this;\n\n      if (this.state.preview_url != \"\") {\n        this.state.preview_url.pause();\n      }\n\n      axios.get(\"/spotify-req\", {\n        params: {}\n      }).then(function (res) {\n        console.log(res.data.songOptions);\n        console.log(res.data.answer);\n\n        _this2.setState({\n          songs: res.data.songOptions,\n          answer: res.data.answer,\n          preview_url: new Audio(res.data.songOptions[res.data.answer].preview_url)\n        });\n      }).catch(function (err) {});\n    }\n  }, {\n    key: \"playSong\",\n    value: function playSong() {\n      //var a = new Audio(this.state.preview_url);\n      this.state.preview_url.play();\n    }\n  }, {\n    key: \"gameOver\",\n    value: function gameOver() {}\n  }, {\n    key: \"guessSong\",\n    value: function guessSong(guess) {\n      console.log(\"guess \" + guess);\n\n      if (guess == this.state.answer) {\n        console.log(\"YOU GUESSED CORRECT! +1\");\n        this.setState({\n          score: this.state.score + 1\n        });\n        this.getSpotify();\n      } else {\n        console.log(\"WRONG!!!\");\n        this.setState({\n          score: this.state.score - 0.5\n        });\n        this.getSpotify();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"navbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"JUKEBOX\"), React.createElement(\"div\", {\n        className: \"rightside\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Score: \", this.state.score)))), React.createElement(\"div\", {\n        id: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        id: \"welcome\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Welcome to Jukebox!\"), React.createElement(\"div\", {\n        id: \"rules\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"rulespan\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"The rules are simple: Press the play button on the preview of a song, and try to guess what song it is by clicking on one of the multiple choice options! If you guess correct, you get a point. If you're wrong, you lose 0.5 points. When you're done playing, hit the 'Game Over' button to submit your score to the leaderboard!\"))), React.createElement(\"button\", {\n        onClick: this.getSpotify,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Next\"), React.createElement(\"button\", {\n        onClick: this.playSong,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Play Song\"), this.state.songs.map(function (song, index) {\n        return React.createElement(\"button\", {\n          key: index,\n          onClick: function onClick() {\n            return _this3.guessSong(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, song.name);\n      }), React.createElement(Popup, {\n        trigger: React.createElement(\"button\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \" Trigger\"),\n        position: \"right center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Popup content here !!\")));\n    }\n  }]);\n\n  return Jukebox;\n}(Component);\n\nexport default Jukebox;","map":{"version":3,"sources":["/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/src/components/Jukebox.js"],"names":["React","Component","axios","Popup","Jukebox","props","songs","preview_url","answer","score","state","getSpotify","bind","playSong","guessSong","gameOver","pause","get","params","then","res","console","log","data","songOptions","setState","Audio","catch","err","play","guess","map","song","index","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Popup from \"reactjs-popup\";\n\nimport \"../styles/jukebox.css\";\n\nclass Jukebox extends Component {\n  constructor(props) {\n    super(props);\n    const songs = [];\n    const preview_url = \"\";\n    const answer = 0;\n    var score = 0;\n\n    this.state = { songs, preview_url, answer, score };\n    this.getSpotify = this.getSpotify.bind(this);\n    this.playSong = this.playSong.bind(this);\n    this.guessSong = this.guessSong.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n  }\n\n  componentDidMount() {\n    this.getSpotify();\n  }\n\n  getSpotify() {\n    if (this.state.preview_url != \"\") {\n      this.state.preview_url.pause();\n    }\n\n    axios\n      .get(\"/spotify-req\", {\n        params: {}\n      })\n      .then(res => {\n        console.log(res.data.songOptions);\n        console.log(res.data.answer);\n        this.setState({\n          songs: res.data.songOptions,\n          answer: res.data.answer,\n          preview_url: new Audio(\n            res.data.songOptions[res.data.answer].preview_url\n          )\n        });\n      })\n      .catch(err => {});\n  }\n\n  playSong() {\n    //var a = new Audio(this.state.preview_url);\n    this.state.preview_url.play();\n  }\n\n  gameOver() {}\n\n  guessSong(guess) {\n    console.log(\"guess \" + guess);\n    if (guess == this.state.answer) {\n      console.log(\"YOU GUESSED CORRECT! +1\");\n      this.setState({ score: this.state.score + 1 });\n      this.getSpotify();\n    } else {\n      console.log(\"WRONG!!!\");\n      this.setState({ score: this.state.score - 0.5 });\n      this.getSpotify();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"navbar\">\n          <nav>\n            <span className=\"navname\">JUKEBOX</span>\n            <div className=\"rightside\">\n              <span className=\"score\">Score: {this.state.score}</span>\n            </div>\n          </nav>\n        </div>\n\n        <div id=\"instructions\">\n          <h1 id=\"welcome\">Welcome to Jukebox!</h1>\n          <div id=\"rules\">\n            <span id=\"rulespan\">\n              The rules are simple: Press the play button on the preview of a\n              song, and try to guess what song it is by clicking on one of the\n              multiple choice options! If you guess correct, you get a point. If\n              you're wrong, you lose 0.5 points. When you're done playing, hit\n              the 'Game Over' button to submit your score to the leaderboard!\n            </span>\n          </div>\n        </div>\n\n        <button onClick={this.getSpotify}>Next</button>\n        <button onClick={this.playSong}>Play Song</button>\n        {this.state.songs.map((song, index) => (\n          <button key={index} onClick={() => this.guessSong(index)}>\n            {song.name}\n          </button>\n        ))}\n\n        <Popup trigger={<button> Trigger</button>} position=\"right center\">\n          <div>Popup content here !!</div>\n        </Popup>\n      </div>\n    );\n  }\n}\nexport default Jukebox;\n"]},"metadata":{},"sourceType":"module"}