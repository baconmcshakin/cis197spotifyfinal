{"ast":null,"code":"import _classCallCheck from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/src/components/Jukebox.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Modal from \"react-modal\";\nimport \"../styles/jukebox.css\";\nvar customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n\nvar Jukebox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Jukebox, _Component);\n\n  function Jukebox(props) {\n    var _this;\n\n    _classCallCheck(this, Jukebox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Jukebox).call(this, props));\n    var songs = [];\n    var preview_url = \"\";\n    var answer = 0;\n    var score = 0;\n    var modalIsOpen = false;\n    _this.state = {\n      songs: songs,\n      preview_url: preview_url,\n      answer: answer,\n      score: score,\n      modalIsOpen: modalIsOpen\n    };\n    _this.getSpotify = _this.getSpotify.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playSong = _this.playSong.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.guessSong = _this.guessSong.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.gameOver = _this.gameOver.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.openModal = _this.openModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.afterOpenModal = _this.afterOpenModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Jukebox, [{\n    key: \"openModal\",\n    value: function openModal() {\n      this.setState({\n        modalIsOpen: true\n      });\n    }\n  }, {\n    key: \"afterOpenModal\",\n    value: function afterOpenModal() {\n      // references are now sync'd and can be accessed.\n      this.subtitle.style.color = \"#f00\";\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.setState({\n        modalIsOpen: false\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getSpotify();\n    }\n  }, {\n    key: \"getSpotify\",\n    value: function getSpotify() {\n      var _this2 = this;\n\n      if (this.state.preview_url != \"\") {\n        this.state.preview_url.pause();\n      }\n\n      axios.get(\"/spotify-req\", {\n        params: {}\n      }).then(function (res) {\n        console.log(res.data.songOptions);\n        console.log(res.data.answer);\n\n        _this2.setState({\n          songs: res.data.songOptions,\n          answer: res.data.answer,\n          preview_url: new Audio(res.data.songOptions[res.data.answer].preview_url)\n        });\n      }).catch(function (err) {});\n    }\n  }, {\n    key: \"playSong\",\n    value: function playSong() {\n      //var a = new Audio(this.state.preview_url);\n      this.state.preview_url.play();\n    }\n  }, {\n    key: \"gameOver\",\n    value: function gameOver() {\n      this.closeModal(); // AXIOS PUT NAME AND SCORE INTO DB\n    }\n  }, {\n    key: \"guessSong\",\n    value: function guessSong(guess) {\n      console.log(\"guess \" + guess);\n\n      if (guess == this.state.answer) {\n        console.log(\"YOU GUESSED CORRECT! +1\");\n        this.setState({\n          score: this.state.score + 1\n        });\n        this.getSpotify();\n      } else {\n        console.log(\"WRONG!!!\");\n        this.setState({\n          score: this.state.score - 0.5\n        });\n        this.getSpotify();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"navbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"JUKEBOX\"), React.createElement(\"div\", {\n        className: \"rightside\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Score: \", this.state.score)))), React.createElement(\"div\", {\n        id: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        id: \"welcome\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Welcome to Jukebox!\"), React.createElement(\"div\", {\n        id: \"rules\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"rulespan\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"The rules are simple: Press the play button on the preview of a song, and try to guess what song it is by clicking on one of the multiple choice options! If you guess correct, you get a point. If you're wrong, you lose 0.5 points. When you're done playing, hit the 'Game Over' button to submit your score to the leaderboard!\"))), React.createElement(\"button\", {\n        onClick: this.getSpotify,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Next\"), React.createElement(\"button\", {\n        onClick: this.playSong,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Play Song\"), this.state.songs.map(function (song, index) {\n        return React.createElement(\"button\", {\n          key: index,\n          onClick: function onClick() {\n            return _this3.guessSong(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, song.name);\n      }), React.createElement(\"button\", {\n        onClick: this.openModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Game Over\"), React.createElement(Modal, {\n        isOpen: this.state.modalIsOpen,\n        onAfterOpen: this.afterOpenModal,\n        onRequestClose: this.closeModal,\n        style: customStyles,\n        contentLabel: \"Example Modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        ref: function ref(subtitle) {\n          return _this3.subtitle = subtitle;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"You scored: \", this.state.score), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Please enter your name\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.gameOver,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Jukebox;\n}(Component);\n\nexport default Jukebox;","map":{"version":3,"sources":["/Users/Ethan/Desktop/CIS 197 FINAL PROJECT/client/src/components/Jukebox.js"],"names":["React","Component","axios","Modal","customStyles","content","top","left","right","bottom","marginRight","transform","Jukebox","props","songs","preview_url","answer","score","modalIsOpen","state","getSpotify","bind","playSong","guessSong","gameOver","openModal","afterOpenModal","closeModal","setState","subtitle","style","color","pause","get","params","then","res","console","log","data","songOptions","Audio","catch","err","play","guess","map","song","index","name"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAO,uBAAP;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,KADE;AAEPC,IAAAA,IAAI,EAAE,KAFC;AAGPC,IAAAA,KAAK,EAAE,MAHA;AAIPC,IAAAA,MAAM,EAAE,MAJD;AAKPC,IAAAA,WAAW,EAAE,MALN;AAMPC,IAAAA,SAAS,EAAE;AANJ;AADU,CAArB;;IAWMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,MAAM,GAAG,CAAf;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,WAAW,GAAG,KAAlB;AAEA,UAAKC,KAAL,GAAa;AAAEL,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,WAAW,EAAXA,WAAT;AAAsBC,MAAAA,MAAM,EAANA,MAAtB;AAA8BC,MAAAA,KAAK,EAALA,KAA9B;AAAqCC,MAAAA,WAAW,EAAXA;AAArC,KAAb;AACA,UAAKE,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcD,IAAd,uDAAhB;AACA,UAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeF,IAAf,uDAAjB;AACA,UAAKG,QAAL,GAAgB,MAAKA,QAAL,CAAcH,IAAd,uDAAhB;AAEA,UAAKI,SAAL,GAAiB,MAAKA,SAAL,CAAeJ,IAAf,uDAAjB;AACA,UAAKK,cAAL,GAAsB,MAAKA,cAAL,CAAoBL,IAApB,uDAAtB;AACA,UAAKM,UAAL,GAAkB,MAAKA,UAAL,CAAgBN,IAAhB,uDAAlB;AAhBiB;AAiBlB;;;;gCACW;AACV,WAAKO,QAAL,CAAc;AAAEV,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD;;;qCAEgB;AACf;AACA,WAAKW,QAAL,CAAcC,KAAd,CAAoBC,KAApB,GAA4B,MAA5B;AACD;;;iCAEY;AACX,WAAKH,QAAL,CAAc;AAAEV,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD;;;wCAEmB;AAClB,WAAKE,UAAL;AACD;;;iCAEY;AAAA;;AACX,UAAI,KAAKD,KAAL,CAAWJ,WAAX,IAA0B,EAA9B,EAAkC;AAChC,aAAKI,KAAL,CAAWJ,WAAX,CAAuBiB,KAAvB;AACD;;AAED9B,MAAAA,KAAK,CACF+B,GADH,CACO,cADP,EACuB;AACnBC,QAAAA,MAAM,EAAE;AADW,OADvB,EAIGC,IAJH,CAIQ,UAAAC,GAAG,EAAI;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASC,WAArB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASvB,MAArB;;AACA,QAAA,MAAI,CAACY,QAAL,CAAc;AACZd,UAAAA,KAAK,EAAEsB,GAAG,CAACG,IAAJ,CAASC,WADJ;AAEZxB,UAAAA,MAAM,EAAEoB,GAAG,CAACG,IAAJ,CAASvB,MAFL;AAGZD,UAAAA,WAAW,EAAE,IAAI0B,KAAJ,CACXL,GAAG,CAACG,IAAJ,CAASC,WAAT,CAAqBJ,GAAG,CAACG,IAAJ,CAASvB,MAA9B,EAAsCD,WAD3B;AAHD,SAAd;AAOD,OAdH,EAeG2B,KAfH,CAeS,UAAAC,GAAG,EAAI,CAAE,CAflB;AAgBD;;;+BAEU;AACT;AACA,WAAKxB,KAAL,CAAWJ,WAAX,CAAuB6B,IAAvB;AACD;;;+BAEU;AACT,WAAKjB,UAAL,GADS,CAET;AACD;;;8BAESkB,K,EAAO;AACfR,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWO,KAAvB;;AACA,UAAIA,KAAK,IAAI,KAAK1B,KAAL,CAAWH,MAAxB,EAAgC;AAC9BqB,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,aAAKV,QAAL,CAAc;AAAEX,UAAAA,KAAK,EAAE,KAAKE,KAAL,CAAWF,KAAX,GAAmB;AAA5B,SAAd;AACA,aAAKG,UAAL;AACD,OAJD,MAIO;AACLiB,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,aAAKV,QAAL,CAAc;AAAEX,UAAAA,KAAK,EAAE,KAAKE,KAAL,CAAWF,KAAX,GAAmB;AAA5B,SAAd;AACA,aAAKG,UAAL;AACD;AACF;;;6BACQ;AAAA;;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgC,KAAKD,KAAL,CAAWF,KAA3C,CADF,CAFF,CADF,CADF,EAUE;AAAK,QAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,EAAE,EAAC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE;AAAK,QAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gVADF,CAFF,CAVF,EAuBE;AAAQ,QAAA,OAAO,EAAE,KAAKG,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBF,EAwBE;AAAQ,QAAA,OAAO,EAAE,KAAKE,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAxBF,EAyBG,KAAKH,KAAL,CAAWL,KAAX,CAAiBgC,GAAjB,CAAqB,UAACC,IAAD,EAAOC,KAAP;AAAA,eACpB;AAAQ,UAAA,GAAG,EAAEA,KAAb;AAAoB,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACzB,SAAL,CAAeyB,KAAf,CAAN;AAAA,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGD,IAAI,CAACE,IADR,CADoB;AAAA,OAArB,CAzBH,EA+BE;AAAQ,QAAA,OAAO,EAAE,KAAKxB,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA/BF,EAgCE,oBAAC,KAAD;AACE,QAAA,MAAM,EAAE,KAAKN,KAAL,CAAWD,WADrB;AAEE,QAAA,WAAW,EAAE,KAAKQ,cAFpB;AAGE,QAAA,cAAc,EAAE,KAAKC,UAHvB;AAIE,QAAA,KAAK,EAAEvB,YAJT;AAKE,QAAA,YAAY,EAAC,eALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE;AAAI,QAAA,GAAG,EAAE,aAAAyB,QAAQ;AAAA,iBAAK,MAAI,CAACA,QAAL,GAAgBA,QAArB;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACe,KAAKV,KAAL,CAAWF,KAD1B,CAPF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAXF,EAcE;AAAQ,QAAA,OAAO,EAAE,KAAKO,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF,CAhCF,CADF;AAmDD;;;;EArImBvB,S;;AAuItB,eAAeW,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Modal from \"react-modal\";\n\nimport \"../styles/jukebox.css\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n\nclass Jukebox extends Component {\n  constructor(props) {\n    super(props);\n    const songs = [];\n    const preview_url = \"\";\n    const answer = 0;\n    var score = 0;\n    var modalIsOpen = false;\n\n    this.state = { songs, preview_url, answer, score, modalIsOpen };\n    this.getSpotify = this.getSpotify.bind(this);\n    this.playSong = this.playSong.bind(this);\n    this.guessSong = this.guessSong.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    this.subtitle.style.color = \"#f00\";\n  }\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  componentDidMount() {\n    this.getSpotify();\n  }\n\n  getSpotify() {\n    if (this.state.preview_url != \"\") {\n      this.state.preview_url.pause();\n    }\n\n    axios\n      .get(\"/spotify-req\", {\n        params: {}\n      })\n      .then(res => {\n        console.log(res.data.songOptions);\n        console.log(res.data.answer);\n        this.setState({\n          songs: res.data.songOptions,\n          answer: res.data.answer,\n          preview_url: new Audio(\n            res.data.songOptions[res.data.answer].preview_url\n          )\n        });\n      })\n      .catch(err => {});\n  }\n\n  playSong() {\n    //var a = new Audio(this.state.preview_url);\n    this.state.preview_url.play();\n  }\n\n  gameOver() {\n    this.closeModal();\n    // AXIOS PUT NAME AND SCORE INTO DB\n  }\n\n  guessSong(guess) {\n    console.log(\"guess \" + guess);\n    if (guess == this.state.answer) {\n      console.log(\"YOU GUESSED CORRECT! +1\");\n      this.setState({ score: this.state.score + 1 });\n      this.getSpotify();\n    } else {\n      console.log(\"WRONG!!!\");\n      this.setState({ score: this.state.score - 0.5 });\n      this.getSpotify();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"navbar\">\n          <nav>\n            <span className=\"navname\">JUKEBOX</span>\n            <div className=\"rightside\">\n              <span className=\"score\">Score: {this.state.score}</span>\n            </div>\n          </nav>\n        </div>\n\n        <div id=\"instructions\">\n          <h1 id=\"welcome\">Welcome to Jukebox!</h1>\n          <div id=\"rules\">\n            <span id=\"rulespan\">\n              The rules are simple: Press the play button on the preview of a\n              song, and try to guess what song it is by clicking on one of the\n              multiple choice options! If you guess correct, you get a point. If\n              you're wrong, you lose 0.5 points. When you're done playing, hit\n              the 'Game Over' button to submit your score to the leaderboard!\n            </span>\n          </div>\n        </div>\n\n        <button onClick={this.getSpotify}>Next</button>\n        <button onClick={this.playSong}>Play Song</button>\n        {this.state.songs.map((song, index) => (\n          <button key={index} onClick={() => this.guessSong(index)}>\n            {song.name}\n          </button>\n        ))}\n\n        <button onClick={this.openModal}>Game Over</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles}\n          contentLabel=\"Example Modal\"\n        >\n          <h2 ref={subtitle => (this.subtitle = subtitle)}>\n            You scored: {this.state.score}\n          </h2>\n          <div>Please enter your name</div>\n          <form>\n            <input />\n          </form>\n          <button onClick={this.gameOver}>Submit</button>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default Jukebox;\n"]},"metadata":{},"sourceType":"module"}